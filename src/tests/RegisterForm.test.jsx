import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { vi, describe, it, beforeEach, expect } from 'vitest';
import RegisterForm from '../components/RegisterForm';

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ mock useNavigate ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const mockNavigate = vi.fn();
vi.mock('react-router-dom', async (importOriginal) => {
  const real = await importOriginal();
  return { ...real, useNavigate: () => mockNavigate };
});

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ mock Firebase Auth ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
vi.mock('firebase/auth', async (importOriginal) => {
  const real = await importOriginal();

  const mockGetIdToken = vi.fn(() => Promise.resolve('fake-token'));
  const mockReload = vi.fn(() => Promise.resolve());

  return {
    ...real,
    getAuth: () => ({
      currentUser: {
        uid: 'uid-123',
        email: 'bob@test.pl',
        getIdToken: mockGetIdToken,
        reload: mockReload, // üëà –¥–æ–±–∞–≤–ª—è–µ–º reload
      },
    }),
    createUserWithEmailAndPassword: vi.fn(() =>
      Promise.resolve({
        user: {
          uid: 'uid-123',
          email: 'bob@test.pl',
          getIdToken: mockGetIdToken,
          reload: mockReload, // üëà –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        },
      })
    ),
    updateProfile: vi.fn(() => Promise.resolve()),
  };
});


/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tests ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
describe('RegisterForm', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    vi.spyOn(window, 'alert').mockImplementation(() => {}); // mock alert
  });

  it('—Ä–µ–Ω–¥–µ—Ä–∏—Ç –≤—Å–µ –ø–æ–ª—è –∏ –∫–Ω–æ–ø–∫—É', () => {
    render(<RegisterForm />);
    expect(screen.getByLabelText(/Pe≈Çne imiƒô/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/Email/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/^Has≈Ço/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/Potwierd≈∫ has≈Ço/i)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /Zarejestruj siƒô/i })).toBeInTheDocument();
  });

  it('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª–∏ —Ä–∞–∑–Ω—ã–µ', () => {
    render(<RegisterForm />);
    fireEvent.change(screen.getByLabelText(/Pe≈Çne imiƒô/i), { target: { value: 'Ala' } });
    fireEvent.change(screen.getByLabelText(/Email/i), { target: { value: 'a@a.pl' } });
    fireEvent.change(screen.getByLabelText(/^Has≈Ço/i), { target: { value: '123' } });
    fireEvent.change(screen.getByLabelText(/Potwierd≈∫ has≈Ço/i), {
      target: { value: '456' },
    });
    fireEvent.click(screen.getByRole('button', { name: /Zarejestruj siƒô/i }));

    expect(screen.getByText(/Has≈Ça nie sƒÖ takie same/i)).toBeInTheDocument();
  });

  it('–≤—ã–∑—ã–≤–∞–µ—Ç Firebase –∏ –¥–µ–ª–∞–µ—Ç navigate –ø—Ä–∏ —É—Å–ø–µ—Ö–µ', async () => {
    const { createUserWithEmailAndPassword, updateProfile } = await import('firebase/auth');

    render(<RegisterForm />);
    fireEvent.change(screen.getByLabelText(/Pe≈Çne imiƒô/i), { target: { value: 'Bob' } });
    fireEvent.change(screen.getByLabelText(/Email/i), { target: { value: 'bob@test.pl' } });
    fireEvent.change(screen.getByLabelText(/^Has≈Ço/i), { target: { value: 'tajne' } });
    fireEvent.change(screen.getByLabelText(/Potwierd≈∫ has≈Ço/i), {
      target: { value: 'tajne' },
    });
    fireEvent.click(screen.getByRole('button', { name: /Zarejestruj siƒô/i }));

    await waitFor(() => {
      expect(createUserWithEmailAndPassword).toHaveBeenCalled();
      expect(updateProfile).toHaveBeenCalledWith(expect.any(Object), {
        displayName: 'Bob',
      });
      expect(window.alert).toHaveBeenCalledWith('Rejestracja przebieg≈Ça pomy≈õlnie!');
      expect(mockNavigate).toHaveBeenCalledWith('/');
    });
  });
});
